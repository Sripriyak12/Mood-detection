# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jf_Pgq94z-_NozQhUsLvNExh-w83oI0o
"""

pip install transformers torch nltk vaderSentiment

import torch
from transformers import AutoModelForSequenceClassification, AutoTokenizer
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
import torch.nn.functional as F

# Download VADER Sentiment Analyzer
nltk.download('vader_lexicon')
sia = SentimentIntensityAnalyzer()

# Load Pre-trained Emotion Classification Model (DistilBERT)
MODEL_NAME = "j-hartmann/emotion-english-distilroberta-base"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_NAME)

# Define Mood Labels
EMOTION_LABELS = ["anger", "disgust", "fear", "joy", "neutral", "sadness", "surprise"]

def analyze_mood(text):
    # Tokenize input text
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=512)

    # Get model predictions
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
        probabilities = F.softmax(logits, dim=1)

    # Get highest probability emotion
    predicted_emotion = EMOTION_LABELS[torch.argmax(probabilities).item()]

    # Get sentiment score using VADER
    sentiment_score = sia.polarity_scores(text)

    if sentiment_score['compound'] >= 0.05:
        sentiment = "positive"
    elif sentiment_score['compound'] <= -0.05:
        sentiment = "negative"
    else:
        sentiment = "neutral"

    return {
        "text": text,
        "emotion": predicted_emotion,
        "sentiment": sentiment,
        "sentiment_scores": sentiment_score
    }

# Example Usage
if __name__ == "__main__":
    text_input = input("Enter a sentence: ")
    result = analyze_mood(text_input)
    print("\nMood Analysis:")
    print(f"Emotion: {result['emotion']}")
    print(f"Sentiment: {result['sentiment']} ({result['sentiment_scores']})")